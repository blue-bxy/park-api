<?php

namespace App\Models\Dmanger;

use App\Models\Bills\DivideInterface;
use App\Models\Bills\OrderAmountDivide;
use App\Models\Financial\ParkingFee;
use App\Models\Parks\Park;
use App\Models\Parks\ParkSpace;
use App\Models\Traits\HasOrderAmountDivide;
use App\Models\User;
use App\Models\Users\UserCar;
use App\Models\Users\UserOrder;
use Illuminate\Database\Eloquent\Builder;
use App\Models\EloquentModel;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;

/**
 * 停车记录模型
 */
class CarStop extends EloquentModel implements DivideInterface
{
    use SoftDeletes, HasOrderAmountDivide;

    public static $logName = "carStop";
    // 添加时白名单
    protected $fillable = [
        'park_space_id', 'user_id', 'user_car_id', 'user_order_id', 'sold_id',
        'car_num', 'park_id', 'car_stop_type', 'free_type_id', 'car_in_time', 'car_out_time',
        'car_in_img', 'car_out_img', 'free_price', 'stop_price', 'special_price', 'washed_price',
        'stop_time', 'pay_stop_type', 'pay_stop_time', 'car_stop_time', 'has_find_car', 'car_type'
    ];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::saved(function (CarStop $stop) {
            if ($stop->isDirty('stop_price') && $stop->stop_price > 0) {
                $stop->addDivideRecord();
            }
        });
    }

    // 车辆类型
    const CAR_TYPE_TEMP = 0;     // 临时车
    const CAR_TYPE_RENT = 1;     // 月租车
    const CAR_TYPE_VIP = 2;      // VIP
    const CAR_TYPE_SPECIAL = 7;  // 特殊车辆（警车、消防车等）

    protected $couponTypes = [
        1 => 'App\Models\Admin',
        2 => 'App\Models\Property'
    ];

    public static $publishType = [
        1 => 'App\Models\Admin',
        3 => 'App\Models\Property'
    ];

    protected $dates = [
        'car_in_time', 'car_out_time', 'pay_stop_time', 'car_stop_time'
    ];

//    public function getStopAmountAttribute()
//    {
//        return $this->formatAmount($this->stop_price);
//    }

    /**
     * 分成
     * @return \Illuminate\Database\Eloquent\Relations\MorphOne
     */
    public function divide()
    {
        return $this->morphOne(OrderAmountDivide::class,'model');
    }

    // 关联到车场
    public function park()
    {
        return $this->belongsTo(Park::class);
    }

    public function space()
    {
        return $this->belongsTo(ParkSpace::class, 'park_space_id');
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function userCar()
    {
        return $this->belongsTo(UserCar::class);
    }

    public function userOrder()
    {
        return $this->belongsTo(UserOrder::class);
    }

    public function order()
    {
        return $this->hasOne(CarStopOrder::class,'car_stop_id');
    }
    /**
     * 寻车流程 反寻
     *
     * @param Builder $query
     * @param int $minute
     * @return Builder
     */
    public function scopeHasFindCar(Builder $query, $minute = 0)
    {
        $query->whereNotNull('car_stop_time') // 停车时间
            ->whereNotNull('car_in_time') // 入场时间
            ->whereNull('car_out_time') // 未离场
            ->where('has_find_car', false); // 寻车状态未结束

        if ($minute > 0) {
            $query->minute($minute);
        }

        return $query;
    }

    /**
     * 停车时间
     *
     * @param Builder $query
     * @param int $minute
     * @return Builder
     */
    public function scopeMinute(Builder $query, $minute = 3)
    {
        // 默认 3分钟后 可以找车
        $time = now()->addMinutes($minute);

        return $query->where('car_stop_time', '<', $time);
    }

    //搜索查询条件
    public function scopeSearch(Builder $query, Request $request)
    {
        if ($park_name= $request->input('park_name')) {
            $query->whereHas('park',function($query) use($park_name){
                $query->where('project_name','like',"%$park_name%");
            });
        }

        if ($coupon_type= $request->input('free_type_id')) {
            $query->whereHas('userOrder',function($query) use ($coupon_type){
                $query->whereHas('coupon',function($query) use ($coupon_type){
                    $query->where('publisher_type', $this->couponTypes[$coupon_type]);
                });
            });
        }

        if ($carNum = $request->input('car_num')) {
            $query->whereHas('userCar',function ($query) use ($carNum) {
                $query->where('car_number', 'like', "%{$carNum}%");
            });
        }
        // 入场时间
        if ($carInTime = $request->input('car_start_time')) {
            $query->where('car_in_time', '>=', $carInTime);
        }
        if ($carEndTime = $request->input('car_end_time')) {
            $query->where('car_in_time', '<=', $carEndTime);
        }

        // 停车类型，1-物业、2-业主、3-云端和4-非预约
        if ($car_stop_type = $request->input('stop_type')) {
            if($car_stop_type == 4){
                $query->whereHas('userOrder',function($query){
                    $query->where('order_type',2);
                });
            }else{
                if($car_stop_type == 2){
                    $query->whereHas('userOrder',function($query) use($car_stop_type){
                        $query->whereHas('carApts', function ($query) use ($car_stop_type) {
                            $query->where('car_rent_id','!=','');
                        });
                    });
                }else{
                    // 查询物业和云端发布车位
                    $query->whereHas('userOrder',function($query) use($car_stop_type){
                        $query->whereHas('carApts', function ($query) use ($car_stop_type) {
                            $query->whereHas('parkSpace', function ($query) use ($car_stop_type){
                                $query->whereHas('spaceType', function ($query) use ($car_stop_type){
                                    $query->where('publisher_type',self::$publishType[$car_stop_type]);
                                });
                            });
                        });
                    });
                }
            }
        }

        return $query;
    }

    public function hasOut()
    {
        return !is_null($this->car_out_time);
    }

    public function info()
    {
        $info = [
            //进场时间、收费标准、出场时间、停车费用
            'car_in_time' => $this->car_in_time->format('Y.m.d H.i'),
            'fee' => 0, //收费标准
            'car_out_time' => null,
            'amount' => $this->stop_price,
        ];

        $info['has_out'] = $this->hasOut();

        if ($this->hasOut()) {
            $info['car_out_time'] = $this->car_out_time->format('Y.m.d H.i');
            // $info['amount'] = $this->stop_price;
            $info['stop_use_time'] = $this->car_out_time->diffInMinutes($this->car_in_time);
        }

        return $info;
    }

    public function totalAmount()
    {
        return $this->stop_price;
    }

    public function trueAmount()
    {
        return $this->totalAmount();
    }

    public function getRates()
    {
        return [];
    }

    public function sendOwnerAmount($divide)
    {

    }
}
